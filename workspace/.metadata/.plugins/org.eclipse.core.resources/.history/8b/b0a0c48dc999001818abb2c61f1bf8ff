/*
 * Copyright 2010-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package com.shelly.poc.ecs.ecsconnection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.ClientConfiguration;
import com.amazonaws.Protocol;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.S3ClientOptions;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.amazonaws.util.StringUtils;

/**
 * This sample demonstrates how to make basic requests to Amazon S3 using
 * the AWS SDK for Java.
 * <p>
 * <b>Prerequisites:</b> You must have a valid Amazon Web Services developer
 * account, and be signed up to use Amazon S3. For more information on
 * Amazon S3, see http://aws.amazon.com/s3.
 * <p>
 * <b>Important:</b> Be sure to fill in your AWS access credentials in
 * ~/.aws/credentials (C:\Users\USER_NAME\.aws\credentials for Windows
 * users) before you try to run this sample.
 */
public class S3AWSDellECS {

    public static void main(String[] args) throws IOException {
        /*
         * Create your credentials file at ~/.aws/credentials (C:\Users\USER_NAME\.aws\credentials for Windows users) 
         * and save the following lines after replacing the underlined values with your own.
         *
         * [default]
         * aws_access_key_id = YOUR_ACCESS_KEY_ID
         * aws_secret_access_key = YOUR_SECRET_ACCESS_KEY
         */
    	String accessKey = "flightsciences";
    	String secretKey = "/sfksi9luv6Q5YGekcwPfwHuAKE1CbcTAw/f8fvk";
    	AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);
   try {
    	ClientConfiguration clientConfig = new ClientConfiguration();
    	clientConfig.setProtocol(Protocol.HTTPS);
    	
    	S3ClientOptions options = new S3ClientOptions();
    	options.setPathStyleAccess(true);
    	
    	AmazonS3 s3 = new AmazonS3Client(credentials, clientConfig);
    	s3.setEndpoint("objectlab.tl.boeing.com:9021");	
    	s3.setS3ClientOptions(options);
    	
    	System.out.println("Connection object ..."+s3);
    	
    	/**
    	 * Clean up all the old buckets and objects
    	 */
    	String bucketName="";
    	List<Bucket> buckets = s3.listBuckets();
    	for (Bucket bucket : buckets) {
    		    bucketName=bucket.getName();
    	        System.out.println( bucketName+"\t" +StringUtils.fromDate(bucket.getCreationDate()));
    	        ObjectListing objects = s3.listObjects(bucketName);
                for (S3ObjectSummary summary : objects.getObjectSummaries()) {
                    System.out.println(summary.getKey()+ "   "+summary.getOwner());
                    System.out.println("Deleting an object :::"+summary.getETag());
                    s3.deleteObject(bucketName,summary.getKey() );
                    }
                System.out.println("Deleting the bucket::::"+bucketName);
                s3.deleteBucket(bucketName);
    	}
    	
    	printTheContents(s3);
          
    	/**
    	 * Create a bucket and objects
    	 */
    	
    	System.out.println("Creating Bucket..\n");
    	s3.createBucket("ecfd.dev.bpm");
    	System.out.println("Uploading a new object to S3 from a file\n");
    	 InputStream is = S3AWSDellECS.class.getResourceAsStream("/AeroDB_.bpmn");
         ObjectMetadata metadata = new ObjectMetadata();
         metadata.setContentType("plain/text");
        PutObjectRequest request = new PutObjectRequest("ecfd.dev.bpm","bpmn/AeroDB_.bpmn", is,metadata);
         request.setMetadata(metadata);
         s3.putObject(request);
          	
    	printTheContents(s3);
    	
    	s3.copyObject("ecfd.dev.bpm", "bpmn/AeroDB_.bpmn", "ecfd.dev.bpm", "bpmn/AeroDB_.bpmn2");
    	
    	printTheContents(s3);

        } catch (AmazonServiceException ase) {
            System.out.println("Caught an AmazonServiceException, which means your request made it "
                    + "to Amazon S3, but was rejected with an error response for some reason.");
            System.out.println("Error Message:    " + ase.getMessage());
            System.out.println("HTTP Status Code: " + ase.getStatusCode());
            System.out.println("AWS Error Code:   " + ase.getErrorCode());
            System.out.println("Error Type:       " + ase.getErrorType());
            System.out.println("Request ID:       " + ase.getRequestId());
        } catch (AmazonClientException ace) {
            System.out.println("Caught an AmazonClientException, which means the client encountered "
                    + "a serious internal problem while trying to communicate with S3, "
                    + "such as not being able to access the network.");
            System.out.println("Error Message: " + ace.getMessage());
        }
        catch (Exception e) {
			System.out.println("Error in the AWS S3...");
			e.printStackTrace();
		}
    }

    private static synchronized void printTheContents(AmazonS3 s3) throws IOException
    {
    	/**
    	 * List all  buckets and objects
    	 */
    	String bucketName="";
    	List<Bucket> bucketlist = s3.listBuckets();
    	if(bucketlist ==null || bucketlist.size()==0)
    	{
    		System.out.println("No Bucket found in S3 storage");
    	}
    	else
    	{
	    	for (Bucket bucket : bucketlist) {
	    		    bucketName=bucket.getName();
	    	        System.out.println( bucketName+"\t" +StringUtils.fromDate(bucket.getCreationDate()));
	    	        ObjectListing objects = s3.listObjects(bucketName);
	                for (S3ObjectSummary summary : objects.getObjectSummaries()) {
	                    System.out.println(summary.getKey()+ "   "+summary.getOwner());
	                    System.out.println("Downloading the object");
		                S3Object object = s3.getObject(new GetObjectRequest(bucketName, summary.getKey()));
		                System.out.println("Content-Type: "  + object.getObjectMetadata().getContentType());
		                displayTextInputStream(object.getObjectContent());
	              	}
	    	}
    	
    	}	
    }
    /**
     * Displays the contents of the specified input stream as text.
     *
     * @param input
     *            The input stream to display as text.
     *
     * @throws IOException
     */
    private static void displayTextInputStream(InputStream input) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(input));
        while (true) {
            String line = reader.readLine();
            if (line == null) break;

            System.out.println("    " + line);
        }
        System.out.println();
    }


}
